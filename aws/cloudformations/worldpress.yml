AWSTemplateFormatVersion: '2010-09-09'
Description: Worldpress Stack
Parameters:
  AvailabilityZones:
    Description: The availability zones in the VPC
    Type: CommaDelimitedList
  PublicSubnets:
    Description: The public subnets in the VPC
    Type: CommaDelimitedList
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: String
  HostedZoneName:
    Description: The Route53 Zone in which to create records
    Type: String
  RecordName:
    Description: The name of the DNS record to create.
    Type: String
  AMI:
    Description: The AMI id of the Platform image.
    Type: String
    MinLength: 12
    MaxLength: 12
    AllowedPattern: ami-[a-f0-9]{8}
  InstanceType:
    Description: The Instance type which used to build stack.
    Type: String
  VpcID:
    Description: The private Subnet ID in VPC that has connection to Equinix.
    Type: String
    AllowedPattern: vpc-[a-f0-9]{8}
  ASGMaxSize:
    Description: AutoScaling max size
    Type: Number
    Default: 1
  ASGMinSize:
    Description: AutoScaling min size
    Type: Number
    Default: 1
  Version:
    Description: Build Version
    Type: String
  SSLCertArn:
    Description: ssl cert arn
    Type: String
  HostedZoneId:
    Description: hosted zone id https://docs.aws.amazon.com/general/latest/gr/rande.html#elb_region
    Type: String
Resources:
  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt [LoadBalancer, DNSName]
        HostedZoneId: !Ref HostedZoneId
      HostedZoneName: !Sub "${HostedZoneName}."
      Name: !Sub "${RecordName}.${HostedZoneName}."
      Type: A
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        Ref: PublicSubnets
      SecurityGroups:
        - Ref: ALBConnectionSecurityGroup
  ALBConnectionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allowing Worldpress client connection
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
      VpcId:
        Ref: VpcID
  ALBHTPPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
  ALBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref SSLCertArn
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 443
      Protocol: HTTPS
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      Name: !Sub 'worldpress-target-group-${Version}'
      Protocol: HTTP
      Port: 80
      HealthCheckPath: '/'
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: VpcID
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 120
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref AvailabilityZones
      VPCZoneIdentifier: !Ref PublicSubnets
      HealthCheckGracePeriod: 1000
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref ASGMinSize
      MaxSize: !Ref ASGMaxSize
      TargetGroupARNs:
      - !Ref ALBTargetGroup
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun: [Install]
        Install:
          packages:
            yum:
              docker: []
          files:
            /app/worldpress/docker-compose.yml:
              content: !Sub |
                version: '3.3'
                services:
                   db:
                     image: mysql:5.7
                     volumes:
                       - dbdata:/var/lib/mysql
                     restart: always
                     environment:
                       MYSQL_ROOT_PASSWORD: somewordpress
                       MYSQL_DATABASE: wordpress
                       MYSQL_USER: wordpress
                       MYSQL_PASSWORD: wordpress

                   wordpress:
                     depends_on:
                       - db
                     image: wordpress:latest
                     ports:
                       - "80:80"
                     restart: always
                     environment:
                       WORDPRESS_DB_HOST: db:3306
                       WORDPRESS_DB_USER: wordpress
                       WORDPRESS_DB_PASSWORD: wordpress
                volumes:
                  dbdata:
              mode: '000755'
              owner: root
              group: root
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMI
      SecurityGroups:
      - !Ref SSHSecurityGroup
      - !Ref ConnectionSecurityGroup
      KeyName: !Ref KeyName
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -ex
          function error_exit
          {
            /opt/aws/bin/cfn-signal -e 1 -r $1 ${WaitHandle}
            exit 1
          }

          yum update -y
          curl -L https://github.com/docker/compose/releases/download/1.20.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          /opt/aws/bin/cfn-init -s ${AWS::StackName} \
                                -r LaunchConfiguration  \
                                --region ${AWS::Region} \
                                --configsets InstallAndRun \
                                || error_exit 'Failed to run cfn-init'

          /usr/local/bin/docker-compose -f /app/worldpress/docker-compose.yml build
          /usr/local/bin/docker-compose -f /app/worldpress/docker-compose.yml up -d

          /opt/aws/bin/cfn-signal -e 0 -r "instance Stack Complete." '${WaitHandle}'
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allowing incoming on ssh port
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: '-1'
        FromPort: 0
        ToPort: 0
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      VpcId: !Ref VpcID
  ConnectionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allowing client connection
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      VpcId: !Ref VpcID
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 120
      ScalingAdjustment: 2
  ALBResponseTimeHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Response time of ALB is over 1 second
      Namespace: AWS/ApplicationELB
      MetricName: TargetResponseTime
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      Period: 60
      Statistic: Average
      AlarmActions:
      - !Ref ScaleUpPolicy
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt LoadBalancer.LoadBalancerFullName
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -2
  ALBResponseTimeLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Response time of ALB is less than 0.2 second
      Namespace: AWS/ApplicationELB
      MetricName: TargetResponseTime
      Threshold: 0.2
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 2
      Period: 60
      Statistic: Average
      AlarmActions:
      - !Ref ScaleDownPolicy
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt LoadBalancer.LoadBalancerFullName

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref WaitHandle
      Timeout: 1500
